buildscript {
    ext {
        springBootVersion = '2.0.4.RELEASE'
        cassandraVersion = '3.11.4'
    }
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("de.undercouch:gradle-download-task:3.4.3")
    }
}

plugins {
    id "net.ltgt.apt" version "0.19"
}

apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'de.undercouch.download'

group = 'com.emprovise.service'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
    mavenCentral()
    maven { url "https://repo.spring.io/milestone" }
}

ext {
    springCloudVersion = 'Finchley.RELEASE'
    mapstructVersion = "1.2.0.Final"
}

dependencies {

    if (isProd) {
        compile('org.springframework.cloud:spring-cloud-starter-kubernetes:1.0.1.RELEASE')
        compile('org.springframework.cloud:spring-cloud-starter-kubernetes-ribbon:1.0.1.RELEASE')
    } else {
        compile('org.springframework.cloud:spring-cloud-starter-netflix-eureka-client')
    }

    compile('org.springframework.boot:spring-boot-starter-actuator')
    compile('org.springframework.boot:spring-boot-starter-data-cassandra-reactive')
    compile('org.springframework.boot:spring-boot-starter-webflux')
    compile('org.springframework.boot:spring-boot-starter-batch')
    compile "org.mapstruct:mapstruct-jdk8:${mapstructVersion}"
    compile('org.slf4j:slf4j-api')
    runtime('net.logstash.logback:logstash-logback-encoder:5.1')
    runtime('com.h2database:h2')
    testCompile('org.springframework.boot:spring-boot-starter-test')
    testCompile('io.projectreactor:reactor-test')
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

processResources {
    filesMatching("**/application.properties") {
        expand(project.properties)
    }
}

tasks.withType(JavaCompile) {
    options.compilerArgs = [
            '-Amapstruct.suppressGeneratorTimestamp=true'
    ]
}

task runJar(type: JavaExec, dependsOn: jar) {
    main = "-jar"
    args jar.archivePath
}

def pullCommonDir = new File(buildDir, 'repo')
pullCommonDir.mkdirs()
def cassandraHome = new File("${buildDir}/libs/apache-cassandra-${cassandraVersion}")

task downloadCassandra(type: Download) {
    src "http://archive.apache.org/dist/cassandra/${cassandraVersion}/apache-cassandra-${cassandraVersion}-bin.tar.gz"
    dest "${buildDir}/repo"
    overwrite false
}

task extractCassandra(dependsOn: downloadCassandra) {
    doLast {
        if (!file("${cassandraHome}").exists()) {
            copy {
                from tarTree("${pullCommonDir}/apache-cassandra-${cassandraVersion}-bin.tar.gz")
                into new File(buildDir, "libs")
            }
        }
    }
}

def static processFileInplace(file, Closure processText) {
    def text = file.text
    file.write(processText(text))
}

task configCassandra(dependsOn: extractCassandra) {
    doLast {
        def cassandraConfigFile = new File("${cassandraHome}/conf", "cassandra.yaml")

        if (cassandraConfigFile.exists()) {
            println "modifying cassandra config file..."

            processFileInplace(cassandraConfigFile) { text ->
                text = text.replace('# data_file_directories:', 'data_file_directories:')
                text = text.replace('#     - /var/lib/cassandra/data', '    - ../var/lib/cassandra/data')
                text = text.replace('# commitlog_directory: /var/lib/cassandra/commitlog', 'commitlog_directory: ../var/lib/cassandra/commitlog')
                text.replace('# saved_caches_directory: /var/lib/cassandra/saved_caches', 'saved_caches_directory: ../var/lib/cassandra/saved_caches')
            }
        }
    }
}

task runCassandra(type: Exec, dependsOn: configCassandra) {
    workingDir "${cassandraHome}/bin"
    commandLine 'cmd', '/c', "cassandra.bat"
}
